
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TodayPlan` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TodayPlan
 * 
 */
export type TodayPlanModel = runtime.Types.Result.DefaultSelection<Prisma.$TodayPlanPayload>

export type AggregateTodayPlan = {
  _count: TodayPlanCountAggregateOutputType | null
  _min: TodayPlanMinAggregateOutputType | null
  _max: TodayPlanMaxAggregateOutputType | null
}

export type TodayPlanMinAggregateOutputType = {
  id: string | null
  userId: string | null
  summary: string | null
  advice: string | null
  focus: string | null
  tasksHash: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TodayPlanMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  summary: string | null
  advice: string | null
  focus: string | null
  tasksHash: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TodayPlanCountAggregateOutputType = {
  id: number
  userId: number
  summary: number
  advice: number
  focus: number
  tasksHash: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TodayPlanMinAggregateInputType = {
  id?: true
  userId?: true
  summary?: true
  advice?: true
  focus?: true
  tasksHash?: true
  createdAt?: true
  updatedAt?: true
}

export type TodayPlanMaxAggregateInputType = {
  id?: true
  userId?: true
  summary?: true
  advice?: true
  focus?: true
  tasksHash?: true
  createdAt?: true
  updatedAt?: true
}

export type TodayPlanCountAggregateInputType = {
  id?: true
  userId?: true
  summary?: true
  advice?: true
  focus?: true
  tasksHash?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TodayPlanAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TodayPlan to aggregate.
   */
  where?: Prisma.TodayPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TodayPlans to fetch.
   */
  orderBy?: Prisma.TodayPlanOrderByWithRelationInput | Prisma.TodayPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TodayPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TodayPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TodayPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TodayPlans
  **/
  _count?: true | TodayPlanCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TodayPlanMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TodayPlanMaxAggregateInputType
}

export type GetTodayPlanAggregateType<T extends TodayPlanAggregateArgs> = {
      [P in keyof T & keyof AggregateTodayPlan]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTodayPlan[P]>
    : Prisma.GetScalarType<T[P], AggregateTodayPlan[P]>
}




export type TodayPlanGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TodayPlanWhereInput
  orderBy?: Prisma.TodayPlanOrderByWithAggregationInput | Prisma.TodayPlanOrderByWithAggregationInput[]
  by: Prisma.TodayPlanScalarFieldEnum[] | Prisma.TodayPlanScalarFieldEnum
  having?: Prisma.TodayPlanScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TodayPlanCountAggregateInputType | true
  _min?: TodayPlanMinAggregateInputType
  _max?: TodayPlanMaxAggregateInputType
}

export type TodayPlanGroupByOutputType = {
  id: string
  userId: string
  summary: string
  advice: string
  focus: string
  tasksHash: string
  createdAt: Date
  updatedAt: Date
  _count: TodayPlanCountAggregateOutputType | null
  _min: TodayPlanMinAggregateOutputType | null
  _max: TodayPlanMaxAggregateOutputType | null
}

type GetTodayPlanGroupByPayload<T extends TodayPlanGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TodayPlanGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TodayPlanGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TodayPlanGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TodayPlanGroupByOutputType[P]>
      }
    >
  >



export type TodayPlanWhereInput = {
  AND?: Prisma.TodayPlanWhereInput | Prisma.TodayPlanWhereInput[]
  OR?: Prisma.TodayPlanWhereInput[]
  NOT?: Prisma.TodayPlanWhereInput | Prisma.TodayPlanWhereInput[]
  id?: Prisma.StringFilter<"TodayPlan"> | string
  userId?: Prisma.StringFilter<"TodayPlan"> | string
  summary?: Prisma.StringFilter<"TodayPlan"> | string
  advice?: Prisma.StringFilter<"TodayPlan"> | string
  focus?: Prisma.StringFilter<"TodayPlan"> | string
  tasksHash?: Prisma.StringFilter<"TodayPlan"> | string
  createdAt?: Prisma.DateTimeFilter<"TodayPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TodayPlan"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type TodayPlanOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  advice?: Prisma.SortOrder
  focus?: Prisma.SortOrder
  tasksHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  _relevance?: Prisma.TodayPlanOrderByRelevanceInput
}

export type TodayPlanWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.TodayPlanWhereInput | Prisma.TodayPlanWhereInput[]
  OR?: Prisma.TodayPlanWhereInput[]
  NOT?: Prisma.TodayPlanWhereInput | Prisma.TodayPlanWhereInput[]
  summary?: Prisma.StringFilter<"TodayPlan"> | string
  advice?: Prisma.StringFilter<"TodayPlan"> | string
  focus?: Prisma.StringFilter<"TodayPlan"> | string
  tasksHash?: Prisma.StringFilter<"TodayPlan"> | string
  createdAt?: Prisma.DateTimeFilter<"TodayPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TodayPlan"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type TodayPlanOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  advice?: Prisma.SortOrder
  focus?: Prisma.SortOrder
  tasksHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TodayPlanCountOrderByAggregateInput
  _max?: Prisma.TodayPlanMaxOrderByAggregateInput
  _min?: Prisma.TodayPlanMinOrderByAggregateInput
}

export type TodayPlanScalarWhereWithAggregatesInput = {
  AND?: Prisma.TodayPlanScalarWhereWithAggregatesInput | Prisma.TodayPlanScalarWhereWithAggregatesInput[]
  OR?: Prisma.TodayPlanScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TodayPlanScalarWhereWithAggregatesInput | Prisma.TodayPlanScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TodayPlan"> | string
  userId?: Prisma.StringWithAggregatesFilter<"TodayPlan"> | string
  summary?: Prisma.StringWithAggregatesFilter<"TodayPlan"> | string
  advice?: Prisma.StringWithAggregatesFilter<"TodayPlan"> | string
  focus?: Prisma.StringWithAggregatesFilter<"TodayPlan"> | string
  tasksHash?: Prisma.StringWithAggregatesFilter<"TodayPlan"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TodayPlan"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TodayPlan"> | Date | string
}

export type TodayPlanCreateInput = {
  id?: string
  summary: string
  advice: string
  focus: string
  tasksHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutTodayPlanInput
}

export type TodayPlanUncheckedCreateInput = {
  id?: string
  userId: string
  summary: string
  advice: string
  focus: string
  tasksHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TodayPlanUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  advice?: Prisma.StringFieldUpdateOperationsInput | string
  focus?: Prisma.StringFieldUpdateOperationsInput | string
  tasksHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutTodayPlanNestedInput
}

export type TodayPlanUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  advice?: Prisma.StringFieldUpdateOperationsInput | string
  focus?: Prisma.StringFieldUpdateOperationsInput | string
  tasksHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TodayPlanCreateManyInput = {
  id?: string
  userId: string
  summary: string
  advice: string
  focus: string
  tasksHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TodayPlanUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  advice?: Prisma.StringFieldUpdateOperationsInput | string
  focus?: Prisma.StringFieldUpdateOperationsInput | string
  tasksHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TodayPlanUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  advice?: Prisma.StringFieldUpdateOperationsInput | string
  focus?: Prisma.StringFieldUpdateOperationsInput | string
  tasksHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TodayPlanNullableScalarRelationFilter = {
  is?: Prisma.TodayPlanWhereInput | null
  isNot?: Prisma.TodayPlanWhereInput | null
}

export type TodayPlanOrderByRelevanceInput = {
  fields: Prisma.TodayPlanOrderByRelevanceFieldEnum | Prisma.TodayPlanOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TodayPlanCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  advice?: Prisma.SortOrder
  focus?: Prisma.SortOrder
  tasksHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TodayPlanMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  advice?: Prisma.SortOrder
  focus?: Prisma.SortOrder
  tasksHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TodayPlanMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  advice?: Prisma.SortOrder
  focus?: Prisma.SortOrder
  tasksHash?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TodayPlanCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TodayPlanCreateWithoutUserInput, Prisma.TodayPlanUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TodayPlanCreateOrConnectWithoutUserInput
  connect?: Prisma.TodayPlanWhereUniqueInput
}

export type TodayPlanUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TodayPlanCreateWithoutUserInput, Prisma.TodayPlanUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TodayPlanCreateOrConnectWithoutUserInput
  connect?: Prisma.TodayPlanWhereUniqueInput
}

export type TodayPlanUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TodayPlanCreateWithoutUserInput, Prisma.TodayPlanUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TodayPlanCreateOrConnectWithoutUserInput
  upsert?: Prisma.TodayPlanUpsertWithoutUserInput
  disconnect?: Prisma.TodayPlanWhereInput | boolean
  delete?: Prisma.TodayPlanWhereInput | boolean
  connect?: Prisma.TodayPlanWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TodayPlanUpdateToOneWithWhereWithoutUserInput, Prisma.TodayPlanUpdateWithoutUserInput>, Prisma.TodayPlanUncheckedUpdateWithoutUserInput>
}

export type TodayPlanUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TodayPlanCreateWithoutUserInput, Prisma.TodayPlanUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TodayPlanCreateOrConnectWithoutUserInput
  upsert?: Prisma.TodayPlanUpsertWithoutUserInput
  disconnect?: Prisma.TodayPlanWhereInput | boolean
  delete?: Prisma.TodayPlanWhereInput | boolean
  connect?: Prisma.TodayPlanWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TodayPlanUpdateToOneWithWhereWithoutUserInput, Prisma.TodayPlanUpdateWithoutUserInput>, Prisma.TodayPlanUncheckedUpdateWithoutUserInput>
}

export type TodayPlanCreateWithoutUserInput = {
  id?: string
  summary: string
  advice: string
  focus: string
  tasksHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TodayPlanUncheckedCreateWithoutUserInput = {
  id?: string
  summary: string
  advice: string
  focus: string
  tasksHash: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TodayPlanCreateOrConnectWithoutUserInput = {
  where: Prisma.TodayPlanWhereUniqueInput
  create: Prisma.XOR<Prisma.TodayPlanCreateWithoutUserInput, Prisma.TodayPlanUncheckedCreateWithoutUserInput>
}

export type TodayPlanUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.TodayPlanUpdateWithoutUserInput, Prisma.TodayPlanUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TodayPlanCreateWithoutUserInput, Prisma.TodayPlanUncheckedCreateWithoutUserInput>
  where?: Prisma.TodayPlanWhereInput
}

export type TodayPlanUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.TodayPlanWhereInput
  data: Prisma.XOR<Prisma.TodayPlanUpdateWithoutUserInput, Prisma.TodayPlanUncheckedUpdateWithoutUserInput>
}

export type TodayPlanUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  advice?: Prisma.StringFieldUpdateOperationsInput | string
  focus?: Prisma.StringFieldUpdateOperationsInput | string
  tasksHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TodayPlanUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  advice?: Prisma.StringFieldUpdateOperationsInput | string
  focus?: Prisma.StringFieldUpdateOperationsInput | string
  tasksHash?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TodayPlanSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  summary?: boolean
  advice?: boolean
  focus?: boolean
  tasksHash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["todayPlan"]>



export type TodayPlanSelectScalar = {
  id?: boolean
  userId?: boolean
  summary?: boolean
  advice?: boolean
  focus?: boolean
  tasksHash?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TodayPlanOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "summary" | "advice" | "focus" | "tasksHash" | "createdAt" | "updatedAt", ExtArgs["result"]["todayPlan"]>
export type TodayPlanInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TodayPlanPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TodayPlan"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    summary: string
    advice: string
    focus: string
    tasksHash: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["todayPlan"]>
  composites: {}
}

export type TodayPlanGetPayload<S extends boolean | null | undefined | TodayPlanDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload, S>

export type TodayPlanCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TodayPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TodayPlanCountAggregateInputType | true
  }

export interface TodayPlanDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TodayPlan'], meta: { name: 'TodayPlan' } }
  /**
   * Find zero or one TodayPlan that matches the filter.
   * @param {TodayPlanFindUniqueArgs} args - Arguments to find a TodayPlan
   * @example
   * // Get one TodayPlan
   * const todayPlan = await prisma.todayPlan.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TodayPlanFindUniqueArgs>(args: Prisma.SelectSubset<T, TodayPlanFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TodayPlanClient<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TodayPlan that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TodayPlanFindUniqueOrThrowArgs} args - Arguments to find a TodayPlan
   * @example
   * // Get one TodayPlan
   * const todayPlan = await prisma.todayPlan.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TodayPlanFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TodayPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TodayPlanClient<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TodayPlan that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TodayPlanFindFirstArgs} args - Arguments to find a TodayPlan
   * @example
   * // Get one TodayPlan
   * const todayPlan = await prisma.todayPlan.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TodayPlanFindFirstArgs>(args?: Prisma.SelectSubset<T, TodayPlanFindFirstArgs<ExtArgs>>): Prisma.Prisma__TodayPlanClient<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TodayPlan that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TodayPlanFindFirstOrThrowArgs} args - Arguments to find a TodayPlan
   * @example
   * // Get one TodayPlan
   * const todayPlan = await prisma.todayPlan.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TodayPlanFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TodayPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TodayPlanClient<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TodayPlans that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TodayPlanFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TodayPlans
   * const todayPlans = await prisma.todayPlan.findMany()
   * 
   * // Get first 10 TodayPlans
   * const todayPlans = await prisma.todayPlan.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const todayPlanWithIdOnly = await prisma.todayPlan.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TodayPlanFindManyArgs>(args?: Prisma.SelectSubset<T, TodayPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TodayPlan.
   * @param {TodayPlanCreateArgs} args - Arguments to create a TodayPlan.
   * @example
   * // Create one TodayPlan
   * const TodayPlan = await prisma.todayPlan.create({
   *   data: {
   *     // ... data to create a TodayPlan
   *   }
   * })
   * 
   */
  create<T extends TodayPlanCreateArgs>(args: Prisma.SelectSubset<T, TodayPlanCreateArgs<ExtArgs>>): Prisma.Prisma__TodayPlanClient<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TodayPlans.
   * @param {TodayPlanCreateManyArgs} args - Arguments to create many TodayPlans.
   * @example
   * // Create many TodayPlans
   * const todayPlan = await prisma.todayPlan.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TodayPlanCreateManyArgs>(args?: Prisma.SelectSubset<T, TodayPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a TodayPlan.
   * @param {TodayPlanDeleteArgs} args - Arguments to delete one TodayPlan.
   * @example
   * // Delete one TodayPlan
   * const TodayPlan = await prisma.todayPlan.delete({
   *   where: {
   *     // ... filter to delete one TodayPlan
   *   }
   * })
   * 
   */
  delete<T extends TodayPlanDeleteArgs>(args: Prisma.SelectSubset<T, TodayPlanDeleteArgs<ExtArgs>>): Prisma.Prisma__TodayPlanClient<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TodayPlan.
   * @param {TodayPlanUpdateArgs} args - Arguments to update one TodayPlan.
   * @example
   * // Update one TodayPlan
   * const todayPlan = await prisma.todayPlan.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TodayPlanUpdateArgs>(args: Prisma.SelectSubset<T, TodayPlanUpdateArgs<ExtArgs>>): Prisma.Prisma__TodayPlanClient<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TodayPlans.
   * @param {TodayPlanDeleteManyArgs} args - Arguments to filter TodayPlans to delete.
   * @example
   * // Delete a few TodayPlans
   * const { count } = await prisma.todayPlan.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TodayPlanDeleteManyArgs>(args?: Prisma.SelectSubset<T, TodayPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TodayPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TodayPlanUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TodayPlans
   * const todayPlan = await prisma.todayPlan.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TodayPlanUpdateManyArgs>(args: Prisma.SelectSubset<T, TodayPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one TodayPlan.
   * @param {TodayPlanUpsertArgs} args - Arguments to update or create a TodayPlan.
   * @example
   * // Update or create a TodayPlan
   * const todayPlan = await prisma.todayPlan.upsert({
   *   create: {
   *     // ... data to create a TodayPlan
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TodayPlan we want to update
   *   }
   * })
   */
  upsert<T extends TodayPlanUpsertArgs>(args: Prisma.SelectSubset<T, TodayPlanUpsertArgs<ExtArgs>>): Prisma.Prisma__TodayPlanClient<runtime.Types.Result.GetResult<Prisma.$TodayPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TodayPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TodayPlanCountArgs} args - Arguments to filter TodayPlans to count.
   * @example
   * // Count the number of TodayPlans
   * const count = await prisma.todayPlan.count({
   *   where: {
   *     // ... the filter for the TodayPlans we want to count
   *   }
   * })
  **/
  count<T extends TodayPlanCountArgs>(
    args?: Prisma.Subset<T, TodayPlanCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TodayPlanCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TodayPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TodayPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TodayPlanAggregateArgs>(args: Prisma.Subset<T, TodayPlanAggregateArgs>): Prisma.PrismaPromise<GetTodayPlanAggregateType<T>>

  /**
   * Group by TodayPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TodayPlanGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TodayPlanGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TodayPlanGroupByArgs['orderBy'] }
      : { orderBy?: TodayPlanGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TodayPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodayPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TodayPlan model
 */
readonly fields: TodayPlanFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TodayPlan.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TodayPlanClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TodayPlan model
 */
export interface TodayPlanFieldRefs {
  readonly id: Prisma.FieldRef<"TodayPlan", 'String'>
  readonly userId: Prisma.FieldRef<"TodayPlan", 'String'>
  readonly summary: Prisma.FieldRef<"TodayPlan", 'String'>
  readonly advice: Prisma.FieldRef<"TodayPlan", 'String'>
  readonly focus: Prisma.FieldRef<"TodayPlan", 'String'>
  readonly tasksHash: Prisma.FieldRef<"TodayPlan", 'String'>
  readonly createdAt: Prisma.FieldRef<"TodayPlan", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TodayPlan", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TodayPlan findUnique
 */
export type TodayPlanFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * Filter, which TodayPlan to fetch.
   */
  where: Prisma.TodayPlanWhereUniqueInput
}

/**
 * TodayPlan findUniqueOrThrow
 */
export type TodayPlanFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * Filter, which TodayPlan to fetch.
   */
  where: Prisma.TodayPlanWhereUniqueInput
}

/**
 * TodayPlan findFirst
 */
export type TodayPlanFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * Filter, which TodayPlan to fetch.
   */
  where?: Prisma.TodayPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TodayPlans to fetch.
   */
  orderBy?: Prisma.TodayPlanOrderByWithRelationInput | Prisma.TodayPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TodayPlans.
   */
  cursor?: Prisma.TodayPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TodayPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TodayPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TodayPlans.
   */
  distinct?: Prisma.TodayPlanScalarFieldEnum | Prisma.TodayPlanScalarFieldEnum[]
}

/**
 * TodayPlan findFirstOrThrow
 */
export type TodayPlanFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * Filter, which TodayPlan to fetch.
   */
  where?: Prisma.TodayPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TodayPlans to fetch.
   */
  orderBy?: Prisma.TodayPlanOrderByWithRelationInput | Prisma.TodayPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TodayPlans.
   */
  cursor?: Prisma.TodayPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TodayPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TodayPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TodayPlans.
   */
  distinct?: Prisma.TodayPlanScalarFieldEnum | Prisma.TodayPlanScalarFieldEnum[]
}

/**
 * TodayPlan findMany
 */
export type TodayPlanFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * Filter, which TodayPlans to fetch.
   */
  where?: Prisma.TodayPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TodayPlans to fetch.
   */
  orderBy?: Prisma.TodayPlanOrderByWithRelationInput | Prisma.TodayPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TodayPlans.
   */
  cursor?: Prisma.TodayPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TodayPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TodayPlans.
   */
  skip?: number
  distinct?: Prisma.TodayPlanScalarFieldEnum | Prisma.TodayPlanScalarFieldEnum[]
}

/**
 * TodayPlan create
 */
export type TodayPlanCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * The data needed to create a TodayPlan.
   */
  data: Prisma.XOR<Prisma.TodayPlanCreateInput, Prisma.TodayPlanUncheckedCreateInput>
}

/**
 * TodayPlan createMany
 */
export type TodayPlanCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TodayPlans.
   */
  data: Prisma.TodayPlanCreateManyInput | Prisma.TodayPlanCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TodayPlan update
 */
export type TodayPlanUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * The data needed to update a TodayPlan.
   */
  data: Prisma.XOR<Prisma.TodayPlanUpdateInput, Prisma.TodayPlanUncheckedUpdateInput>
  /**
   * Choose, which TodayPlan to update.
   */
  where: Prisma.TodayPlanWhereUniqueInput
}

/**
 * TodayPlan updateMany
 */
export type TodayPlanUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TodayPlans.
   */
  data: Prisma.XOR<Prisma.TodayPlanUpdateManyMutationInput, Prisma.TodayPlanUncheckedUpdateManyInput>
  /**
   * Filter which TodayPlans to update
   */
  where?: Prisma.TodayPlanWhereInput
  /**
   * Limit how many TodayPlans to update.
   */
  limit?: number
}

/**
 * TodayPlan upsert
 */
export type TodayPlanUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * The filter to search for the TodayPlan to update in case it exists.
   */
  where: Prisma.TodayPlanWhereUniqueInput
  /**
   * In case the TodayPlan found by the `where` argument doesn't exist, create a new TodayPlan with this data.
   */
  create: Prisma.XOR<Prisma.TodayPlanCreateInput, Prisma.TodayPlanUncheckedCreateInput>
  /**
   * In case the TodayPlan was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TodayPlanUpdateInput, Prisma.TodayPlanUncheckedUpdateInput>
}

/**
 * TodayPlan delete
 */
export type TodayPlanDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
  /**
   * Filter which TodayPlan to delete.
   */
  where: Prisma.TodayPlanWhereUniqueInput
}

/**
 * TodayPlan deleteMany
 */
export type TodayPlanDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TodayPlans to delete
   */
  where?: Prisma.TodayPlanWhereInput
  /**
   * Limit how many TodayPlans to delete.
   */
  limit?: number
}

/**
 * TodayPlan without action
 */
export type TodayPlanDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TodayPlan
   */
  select?: Prisma.TodayPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TodayPlan
   */
  omit?: Prisma.TodayPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodayPlanInclude<ExtArgs> | null
}
